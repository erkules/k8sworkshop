---
# ServiceAccount
kind: ServiceAccount
apiVersion: v1
metadata:
  name: controller

---
# Rolebinding
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: baba
subjects:
- kind: ServiceAccount
  name: controller
roleRef:
  kind: ClusterRole
  name: admin
  apiGroup: rbac.authorization.k8s.io
---
# Configmap
apiVersion: v1
kind: ConfigMap
metadata:
  name: operator
data:
  script.sh: |
    #!/bin/sh
    export TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
    export NAMESPACE=$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace)
    export CACRT=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt
    curl -s -N  --cacert $CACRT -H "Authorization: Bearer $TOKEN" https://kubernetes.default:443/api/v1/namespaces/${NAMESPACE}/pods?watch=true| jq --unbuffered -r '.object.metadata.name' | while read -r pod
    do
    # Wir checken ob der name doof ist (ja hätten wir auch im jq machen können
    echo Found running Pod $pod
    echo $pod | grep doof
    if [ $? -eq  0 ]
    then
    # Checken ob 
    echo "$pod got a wrong name: TERMINATE IT (if it is running)"
    PHASE=$(curl -s -N  --cacert $CACRT -H "Authorization: Bearer $TOKEN" https://kubernetes.default:443/api/v1/namespaces/${NAMESPACE}/pods/$pod | jq -r  .status.phase )
    if [ $PHASE == "Running" ]
    then
    echo $pod is running so we kill it
    sleep 5
    curl --cacert $CACRT -H "Authorization: Bearer $TOKEN" -X DELETE https://kubernetes.default:443/api/v1/namespaces/${NAMESPACE}/pods/$pod
    fi
    fi
    done
---
# Pod
apiVersion: v1
kind: Pod
metadata:
  name: controller
spec:
  serviceAccountName: controller
  containers:
  - image: erkules/kubectl:v1.33.2
    name: haha
    command: 
    - sleep
    - "5000"
    volumeMounts:
    - name: operator
      mountPath: /srv
  volumes:
  - name: operator
    configMap:
      name: operator
      defaultMode: 0777

---
